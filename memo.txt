5/16

라이브러리란?
자주 사용되는 기능이나 함수 서브루틴 등등등 가르켜서 총체적으로
구현해놓은 프로젝트

lib은 링크시 필요하고 dll은 프로그램 실행시 필요하다.

동적 라이브러리(xxx.dll)
 : 프로그램 시작하고 있는 동안에 해당 라이브러리를 참조하여 실행한다.
 하나의 메모리영역에 올려두고 여러프로그램들이 나누어 사용하는 라이브러리.

//장점
- 메모리 절약 가능
- 프로그램에 한번 올려진 메모리를 공유하므로 사용공간자체가 적다.
- 패치가 정적라이브러리보다 수비게 진행 가능하다.
- 실행 중간에 패치가 가능하다.

//단점
- 프로그램의 외부의존도가 높아진다.
- 공유 라이브러리를 메모리에 올리려면 찾고 검색하는데 시간이 걸리므로 성능저하가 생긴다.

정적 라이브러리(xxx.lib)
 : 프로그램을 컴파일하는 과정에 내가 작성한 라이브러리코드들이 포함이 된다.

라이브러리 코드가 바뀌면 다시 빌도와 패치가 필요하다.

//장점
- 한번 완성되면 안정적으로 프로그램 사용이 가능하다.
- 컴파일시 필요한 라이브러리를 프로그램 내에 적재하기 때문에 앱을 안정적으로 활용할 수 있게 된다.
- 런타임시 외부를 참조할 필요가 없기 때문에 속도에서 장점이 있다.

//단점
- 라이브러리 변경시 모든 프로그램을 처음부터 다시 빌드하여 새로운 버전으로 배포를 진행해줘야 한다.

정적 라이브러리를 추가하는 방법
 	- 소스코드로 추가하는 방식
	- 비쥬얼스튜디오 옵션에 추가해서 사용하는 방식

https://blog.naver.com/PostView.nhn?isHttpsRedirect=true&blogId=wlvkddlwkd&logNo=221997200661&categoryNo=0&parentCategoryNo=0&viewDate=&currentPage=1&postListTopCurrentPage=1&from=postView

후보
1) celeste -> 2D 물리엔진 개발
2) Just Shapes and Beats -> particle
3) shovel knight?

5/17
Graphics Rendering Pipeline(Rendering Pipeline)
	: 3차원 3D 모델 데이터들을 2차원인 모니터에 투영하는 프로세스
단계)
	1. vertex 데이터 처리 단계
	2. rasterizing 단계
	3. pixel/fragment 단계
	4. 출력/병합 단계

[Input Assembler]
모델 정보
	- vertex buffer = vertex info
		- vertex info = position, uv, color etc.
	- index buffer = holds index => which triangle is made up of which vertex.
 		- 그리는 순서를 알려줌 = 직선 순서
		- vertex 절약 = 메모리 절약 
	- primitive topology(DirectX3D 기준) : vertex가 이루는 도형에 대한 정보
		- ex) point list, line list, triangle strip, triangle list.
	- Input assembler(입력 조립기) : vertex buffer와 primitive topology 등을 읽어서 도형으로 조립하는 단계

[Vertex Shader]
	- 정점 정보들은 local 좌표.
	- local space -> world space -> view space -> projection space -> clip space(projection to monitor)-> viewposrt 로 변환해주는 shader.
	- 추가로 물체를 옮기거나 텍스처, 색상을 바꾸는 일도 담당한다.

5/18
[카메라 변환]
	- 가상 카메라가 보는 공간. 카메라에 상대적인 공간. 
	- view volume = Fov(시야각), aspect(종횡비)을 포함함.
	- 뷰 볼륨은 near plane, far plane에 의해 view frustrum(절두체)의 영역으로 정의 된다.
		- 절두체 = 카메라를 통해서 볼 수 있는 영역. 그 외엔 그리지 않는다.
		- plane에 걸쳐 있으면 해당 밖의 부분은 잘려진다. 이것을 clipping이라고 하며 clip space에서 전환이 이루어 진다.

[Projection(투영) 변환]
	- 원근감을 주는 단계
	- 절두체를 축을 유지한 직육면체 형태로 변경 후 모든 물체를 3차원 클립공간으로 변환하는 것.
		- 직육면체 볼륨으로 바꾸면 클리핑 작업을 쉽게 할 수 있다.
	- 3D -> 2D 가 아니라 3D 물체를 적당한 3D 물체로 바꾸는 것. 
	- 투영 변환을 거치면 절두체 뒤쪽에 있던 영역의 폴리곤이 작아지는 것이 원근감이 적용된 것.
	- vertex shader에 영향을 많이 주기 때문에 파악해두는 것이 중요하다.

[Tesselation]
	- vertex의 개수를 조절해 줄 수 있는 것.
	- 잘게 쪼개서 더 디테일하게 표현할 수도 있고, 합쳐서 최적화 성능을 올릴 수 있다.
	- Level Of Detail(LOD)이라고도 한다.
	- tesselation을 사용하면 하나의 모델에 여러 해상도의 모델 데이터를 가지고 있을 필요가 없다.

[Geometry]
	- 기본 도형에서 정점을 추가하거나 삭제하여 모델을 변경할 수 있는 셰이더. 
		- 보통 늘려줄 때 사용.
	- 게임 오브젝트를 추가해서가 아니라 셰이더 내에서 수정이 가능한 부분이라면 디스크 용량과 그래픽 메모리에 도움이 된다.
		=> 그래픽카드에게 역할 넘겨버리기
		- cpu = 교수님
		- gpu = 유치원 100 명 -> 단순 작업은 그래픽이 더 낫다. ex) particles
	- 테셀레이션 등으로 추가된 정점들을 표현할 때에도 사용된다.

[Rasterizer]
	- 처리된 정점들과 폴리곤들을 픽셀화 되는 단계.
	- 화면에 그려질 2차원 삼각형의 세 정점이 결정되면 다음과 같은 일이 일어난다.
		1. 이 삼각형이 포함하는 모든 픽셀마다 픽셀셰이더가 실행.
		2. vertex information이 interpolation(보간)되어 삼각형 내부의 각각 픽셀셰이더로 넘어온다.
	- 해당 단계는 Direct3D에서 이러한 과정들을 통틀어서 rasterization이라고 부른다. 
	- 프로그램이 불가능하고 하드웨어 자체 알고리즘을 통해 동작한다.
		- clipping
		- perspective division(원근 나눗셈)
		- backface culling(뒷면 제거)
		- viewport transform
		- ndc scan transform

[클리핑]
	클리핑 투영변환 이후의 클립공간 볼륨 밖의 폴리곤들을 잘라내는 작업.

[원근 나눗셈]
	투영변환을 마친 정점데이터는 (x, y,  z, w)에서 w성분에 z값을 저장한다. 그리고 모든 성분으로 z로 나눠서 z축을 없앤다.
	=> (x, y, z)로 바꿘다. 이를 NDC(normalize device coordinate)공간이라고 부른다.
	- 좌표의 x, y범위가 [-1 ~ 1], z는 [0 ~ 1]으로 바꾸기 때문에 정규화 공간이라고 부르는 것.
	- 비율좌표로 바꿔서 다양한 디스플레이에 대응하게 하는 것.

[뒷면 제거]
	- 외적 삼각형의 바라보고 있는 면의 방향을 구하여 뒷면일 경우에 연산에서 제외 시킨다.

[뷰포트 변환]
	- 윈도우 스크린 공간 내에 2차원 이미지가 그려질 뷰포트가 정의된다.
	- NDC 공간의 물체들을 스크린 공간으로 이전시키는 변환을 뷰포트 변환이라고 한다.

[스캔 변환]
	- 각 primitive에 대해 내부의 모든 픽셀(fragment)를 생성하는 작업. 이때 정점 데이터에 들어온 데이터들은 보간(linear interpolation)이 되어서 픽셀셰이더로 넘어간다.
	- 렌더링 프로그램에서 직접적인 영향을 미치기 때문에 매우 중요하다.

[Pixel Shader]
	- 레스터화 된 도형에 텍스쳐 매핑, 법선 매핑, 노말 매핑 기법으로 텍스쳐를 입혀서 색을 표현한다. 원한다면 특정색깔로 표현이 가능하다.
	- 조명 처리나 이미지 처리를 할 때 유용하게 사용된다.

[Output Merger]
	- 깊이 - 스텐실 테스트와 블렌딩이 일어나서 최종적인 렌더 타겟(frame buffer) 물체를 그려줍니다.

5/19
[.inl = inline]
inline은 선언과 동시에 정의를 하기 때문에 cpp 파일에 할 수 없다. 다만 이렇게 될 경우 선언과 정의를 분리하기 어려워진다. 
.inl에서 inline함수의 정의부를 적어두고 .h에서 선언부를 적고 맨 밑에 #include .inl를 선언해주면 된다.
.inl에서 template 정의도 가능해진다.
https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=nawoo&logNo=220409027910 

[스마트 포인터]
포인터처럼 동작하는 클래스 템플릿.
사용이 끝난 메모리를 자동으로 해제해준다.
https://min-zero.tistory.com/entry/C-STL-1-3-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%8A%A4%EB%A7%88%ED%8A%B8-%ED%8F%AC%EC%9D%B8%ED%84%B0smart-pointer
ComPtr 클래스 = 템플릿 매개 변수로 지정된 인터페이스를 나타내는 스마트 포인터 형식을 만든다. ComPtr는 기본 인터페이스 포인터의 참조 개수를 자동으로 관리하여 참조 횟수가 0이 되면 인터페이스를 릴리즈 한다.
	- Get : 스마트 포인터의 원래 포인터의 값을 return
	- GetAddressOf : 스마트 포인터의 값의 주소를 return

	- shared_ptr : 한 객체를 참조하는 스마트 포인터의 개수를 참조하는 스마트 포인터
	- unique_ptr : 하나의 스마트 포인터만이 객체를 가리킬 수 있도록 한다.
	- weak_ptr : 하나 이상의 shared_ptr가 가리키는 객체를 참조할 수 있지만 reference count를 늘리지 않는 스마트 포인터.

5/22
directX로 가져온 것 가지고 할당을 해야 된다.

소프트 렌더링 = CPU로 그리는 것. = 점과 선으로 그리는 것.
* GetAddressOf? vs GetAddress()

Swap Chain = 사용자에게 프레임을 표시하는 데 사용되는 버퍼의 컬렉션.
	- 첫 버퍼가 표시되는 버퍼. 
	= 궁극적으로 render target을 순차적으로 pointing 하는 것이 목표.
	즉 swap chain이 프레임을 가지고 있을 터이니 얘한테서 target을 가져와 render target에게 넘겨주면 된다.

//각 인터페이스는 화면에 따라. 나붕에 찾아볼 것.
IDXGIDevice
IDXGIFactory

HDR를 코드로 구현해주는 것. 

render target,

어플 -> 렌더링 -> view => swapchain 안의 rendering target을 보여주는 것 이 view

깊이 버퍼는 자주 쓰이니 함수로 빼낸다. = CreateTexture
desc = description. 
Miplevels? = 미리 텍스쳐들을 단계별로 만들어서 비율에 따라 그때그때 가져오는 것이 mip.
그것의 level. 상시 메모리는 많이 먹을 것이다.
aliasing, 계단 없애는 것이 anti-aliasing
Format : 그낭 32bit 맞춰주려고.
그림자 그릴 때 버퍼는 2개 사용한다. 
=> 태양 버퍼, 눈 버퍼를 파악, 태양버퍼에서 그림자가 생길 곳을 저장하고 눈 버퍼에서 그림자를 계산한다.

subresource data 에 wrapping해서 넣어야 됨.
배경은 하늘색 혹은 회색, 디버깅 용이하게 하기 위해.

게임 3개 내일?
Device는 Context를 통해서 access
Double Buffering
	- 하나의 버퍼 만으로 rendering 시 2가지 문제가 있을 수 있다.
		- Screen Flickering : 찰나의 시간에 지워진 버퍼가 보여지는 것
		- Screen Tearing : 새로운 프레임 데이터와 이전 프레임 데이터가 같이 보이는 순간
	- 전면 버퍼에 현재 화면에 출력되는 이미지를 보이고 후면 버퍼에 다음에 출력하는 이미지를 선택하는 것.
Presenting
	- Direct3D에서 2개의 버퍼간의 역할을 교환하여 페이지가 전환되게 하는 것을 프레젠팅이라고 하며 이를 하는 방법을 flipping이라고 한다.
flipping
	- 복사로 데이터를 넘기는 것이 아니라 전면과 후면 버퍼의 포인터를 맞바꾸는 플리핑을 사용하며 이를 위해 Swap Chain을 사용한다.
Swap Chain
	- 순차적으로 연결된 프레임 버퍼들의 집합
	- Direct3D에서는 이를 IDXGISwapChain을 통해서 한다.	

5/23
- celeste
- just shapes and beats
- shovel knight

- 컵헤드는 그냥 저냥 그래픽스를 할 수 없다.
- 던파 신캐(괜춘, 애니메이션 할 생각으로)
- 디아블로 2는 매우 좋다. RPG에 들어갈만한 것이 다 들어가기 때문. 
  - 생각보다 시간 많이 걸린다. sprite가 16방향, 몬스터는 6방향, 타일맵 사용.
- into the gungeon - 라이팅 작업도 있고 괜춘.
- 문라이터 
- 베스티온 - 좋음. isometric tool
- 카타나 제로 : dx 때 하기 좋은 아이템
- 림월드 - 매우 어렵고 매우 좋음
- spline 컨트롤

-celeste 괜춘
- just shapes and beats 아주 좋음 우헤헿
- shovel knight - api에 걸맞음.

- 테일즈 위버 괜춚.
- 달토끼 키우기 => UI까지 구현하면 모바일 회사에 취업하기 아주 좋을 것.
- 하데스 - 좋음.

- 바바 이즈 유 - 코딩이랑 똑같지 머
- 데드셀은 쓰리디..
- 월 월드 - 좋음. 탄막도 있고 
- 돔키퍼
- 포켓몬 dp는 스리디? ㄷㄷ
- 스타크래프트 - 괜찮은데 만든 사람이 없다.
- 뱀파이어 서바이벌 - dx 비추천
- 다키스트 던전 괜춘
- brain melt down - 3D
- cat quest - 3D

5/24
Nivida PhysX
 -> cmake 통해서
이걸 써서 만들면 퀄리티는 좋을 텐데. 
쓸까 했는데 공부할 것이 없다. wrapping이 너무 잘 되어 있다.

지금까진 RAM에만 그렸다.
CPU와 RAM GPU

rendering target = gpu에서 만들어짐
view = context처럼 간접적으로 접근할 수 있게 하는것.
rendering target은 실행할 수 있는 것이 없다. 

오늘의 목표 -> 삼각형 그리기
(interpolation)?
정규화 되어 있는 것 => 중앙이 
(-1, 1)				(1, 1)


		(0, 0)


(-1, -1)				(-1, 1)

renderer의 역할 = 화면정보 넘겨주기 -> vertex buffer
gpu에러는 글자로 파악해야 된다. 에러 메세지를 컴파일러에서 주지는 않는다. 

VSIn = 정점으로 들어오는 데이터 = 정점 데이터
VSOut = 결과
scemantics = 데이터 행동패턴이 올바른가

Binary Large Object의 줄임말인 "blob"은 파일 형식을 반드시 따를 필요는 없는 이진 형식의 데이터 덩어리입니다.

currentpath().parent_path()

vertex buffer -> vertex shader

5/25
interpolation=> during rasterizing.
반시계방향으로 그릴 시 뒤집혔다 판단, rasterizing하여 뒷면은 제거된다.
숙제: 네모 그려오기

5/30
for generalization
GraphicDevice_Dx11
	1) CreateShader
		- Create Vertex Shader
			=> Compile part -> 따로 떼어내도 되지 않나.
			=> mDevice-> CreateVertexShader
				필요 parameter)
					- vsblob
					- vsshader => 저장 위치
		- Create Pixel Shader
			=> compile part도 따로 떼어내어도
			=> mDevice -> CreatePixelShader
				필요 parameter)
					- PSBlob
					- psshader => 저장 위치
		- input layout 생성
			- mDevice -> CreateInputLayout
				필요 parameter
					- D3D11_INPUT_ELEMENT_DESC arrLayout
					- ID3D11InputLayout inputLayout = 저장 위치

	2) Draw
		필요 외부 parameter)
			- UINT vertexSize

			- void IASetVertexBuffers(
 				[in]           UINT         StartSlot, // the starting input slot for binding the vertex buffers.
				[in]           UINT         NumBuffers, / numberofvertexes
				[in, optional] ID3D11Buffer * const *ppVertexBuffers, // vertexbuffer
				[in, optional] const UINT   *pStrides, // strides between each element in the vertex buffer -> attribute skip 같은 거 할 때 사용.
				[in, optional] const UINT   *pOffsets // offset만큼 skip하고 그 이후 부터 읽기 시작함. 
			);

			- void IASetInputLayout(
  				[in, optional] ID3D11InputLayout *pInputLayout
			);
		
			- void IASetPrimitiveTopology(
  				[in] D3D11_PRIMITIVE_TOPOLOGY Topology
			);

			- mContext->VSSetShader(renderer::triangleVSShader, 0, 0);
			- mContext->PSSetShader(renderer::trianglePSShader, 0, 0);
			- mContext->Draw(3, 0);

5/31
비율이 달라서 원을 그렸다면 찌그러지게 만들어졌을 것이다.
나중에 버택스 셰이더에서 그것도 감안하여 그려지게 할 것이다.

좌우상하 움직이려면 현재로선 renderer::initialize에서 움직일 수 밖에 없다. 하지만 그렴 gpu에서가 아니라 cpu에서 계산하게 되는 것.
gpu에서 계산하게 하려면 .hlsl, 즉 shader에서 움직여야 한다.
그럼 cpu에서 gpu로 움직이려면 어떻게 해야 될까. 연결할 버퍼가 필요하다. 현재 있는 버퍼들은 하드 디스크에 저장될, 큼직큼직한 버퍼들이다.
필요한 것은 상수 버퍼. 상수 버퍼를 통해 cpu에서 gpu로 데이터를 넘겨버릴 수 있다.
구조체 버퍼(struct buffer)도 쓴다.

GPU는 어디까지 써야 될까. - GPU하면 병렬연산이 쉬워진다. 쓰레드가 조오오올라 많기 때문
1) rendering - 자동으로 directx에서 사용하게 한다.
2) 단순계산
3) 물리는 cpu에서 보통, 하지만 GPU에서도 쓴다. Nividia Physics에선 GPU에서 물리 계산한다. 
	- 하복(Havok) 엔진은 cpu에서 계산한다.
- 특수 효과를 많이 써서 GPU에 이미 많은 부하가 있을 경우 CPU로 물리 계산하는 것이 좋다.
- 독립적인 간단한 것들을 많이 필요할 때 GPU를 써야 한다.
- 다만 GPU는 그래픽을 계산하는 프로그램이기 때문에 기본적으로 4x4 행렬 느낌으로 정보를 전환해줘야 한다. 하지만 최근에 이를 연결하는 OpenCL(?) 등을 많이 씀.

IndexBuffer = 정점 그릴 순서를 알려주는 버퍼

todo) check create buffer's parameters.
packing rules for constant variables

shader stage?
ConstantBuffer -> need mapping.
=> buffer에서 정보를 mapping하고 memcpy하여 GPU로 전달.
DrawIndexed = 인덱스 버퍼.
숙제 ) input class로 삼각형 움직이게 하기.
todo) calculation, pipeline review, what do I do, check it out.

6/1
법적 유급휴가

공휴일(빨간날)

연차(유급휴가)
5일 연속으로 근무하면 하루치 임금(주휴수당)
근로자의날 근무를 할 수 있으나 1.5배 + 하루치 임금 = 2.5배를 받아야 한다. 퇴사 할 때 노동청 가라.

추석, 설날, 공휴일 등등 무급 휴가

포괄 임금제 = 내가 받을 야근수당을 연봉에 + 시키는 것.
게임 업계특성상 야근을 할수 밖에 없으니 기본급이 높은 곳으로 가야 한다.

[직장인 초년차의 실수]
- 계약서 잘 안 읽음.
- 가져가도 되냐 물어봄
	- 대기업은 협상안됨. 테이블 있으니까
- 노무사 사무실에 가서 물어보자.
- 성과금 정기적으로 나오는 가.

퇴직금 - DB형, DC형
- DC - 떼먹는거 방지용.
- 연봉상승포이 빠르면 DB가 좋고
- 연봉상승률이 느리지만 오래 다닐거면 DB -> 국외 주식으로. 미국으로.

나스닥 100 snp 500 꾸준히 사모으세요. 퇴직할 때 꺼내세요.

--
Release

포인터의 단점
1. 가독성이 떨어지고 사용하기가 번거롭다.
2. 중간에 포인터 값을 바꾸거나 하면 프로그램이 오류가 생길 수 있다 = 조심해서 사용해야 한다.
3. 메모리 해제를 프로그래머가 직접 해줘야 한다.(C#은 알아서 함)

스마트 포인터)
동작하는 템플릿 클래스 객체. 사용하지 않는 메모리를 자동으로 해제해준다.
#include <memory>
종류:
std::unique_ptr<>
//오직 하나의 객체만 소유할 수 있도록 만든 스마트 포인터.

std::shared_ptr<> -> 제일 많이 씀.
: 하나의 특정 객체를 참조하는 스마트 포인터가 총 몇 개인지를 체크하는 스마트 포인터.
여러 포인터가 하나의 객체를 참조할 때, 하나의 포인터에서 delete하면 다른 포인터는 dangling이 되어 버린다.
해제는 맨 마지막 포인터가 해제 될 때만 해제 되게 하는 것.
Control Block을 하나 만들어서 이를 공유하는 방식으로 shared 개수를 파악한다.
주의점)
make_shared를 통해 만드는 것이 좋다. 주소값을 통해 전달된다면 자기가 객체를 첫번째로 소유하는 것처럼 행동하며 
이를 여러번 반복하면 control block이 여러가지가 생겨 sharedPointer를 쓰는 의미가 없어진다.

문제) 서로가 서로를 가리키고 있을 때(순환 참조) = shared_ptr를 멤버변수로 지닌 객체들이 서로를 가리킬 때
=>서로 파괴 안됨. -> 참조횟수가 줄어들지 않아서.
리소스는 shared_ptr로 하면 좋지 않을까 하는 느낌적 느낌. 나중에 바꿀 거임.

std::weak_ptr<>
위 문제를 해결하기 위해 나타난 해결책. 트리 구조로 되어 있다.
단점) 느리다. 여러 번 참조를 통해 움직이기 때문.

12일에 쉼.

6/2 [내꺼]
- DirectX = set of APIs for graphic rendering. made by Microsoft
	- 그 외에 input, sound, 영상 등에 대한 API도 포함되어 있다.
- Initialization: graphic device를 통하는 ID3D11DeviceContext
- Graphics Pipeline:
	3D Model -> Vertex Shader -> Rasterizer -> Pixel Shader -> Output
  also
	Input Assembler -> Vertex Shader -> Hull Shader -> Tessellator -> Domain Shader -> Geometry Shader -> Rasterizer -> Pixel Shader -> Output Merger
	[Input Assembler]
		- 정점 데이터 처리 단계. Vertex Buffer와 Index Buffer를 넘기는 단계이다.
		- Input Assembler에서 정점들을 읽어서 삼각형과 같은 도형으로 조립함.
	[Vertex Shader]
		- IASetxxxBuffer를 통해 데이터를 받아오고 이로 도형 생성.
		- 이때 도형은 Local Space에서 Clip Space까지 이동한다.
	[Hull Shader]
		- 폴리곤을 어떤 방식으로 분할할지 결정하는 단계.
		- Control Points, Constant Data를 병렬로 처리함.
	[Tessellator]
		- Hull Shader에 따라 폴리곤 분할
	[Domain Shader]
		- Tessellator에서 나뉘어진 폴리곤을 받아 구성 정점들의 공간 정보를 조정
	[Geometric Shader]
		- Mesh 다루기
	[Rasterizer]
		- 정점 정보를 화면에 송출하기 위해 변형시키는 단계.
	[Pixel Shader]
		- 렌더링 대상 픽셀들의 색 계산
	[Output Merge]
		- 화면에 렌더링.
- HLSL : high-level shader language from also Microsoft
	used for Vertex/Pixel Shaders.

- Buffer
	- for the GPU to access vertex information, we need buffers = ID3D11Buffer
	- Index Buffers
		: store index numbers for each triangle.
	- Buffer Creation Process
		1) Create Buffer Description 
			= D3D11_BUFFER_DESC
			- .BindFlags에서 Buffer종류를 지칭.
		2) specify the data to initialize the buffer 
			= D3D11_SUBRESOURCE_DATA
			- .pSysMem = array
		3) Create Buffer
			= CreateBuffer(Description, Data, Buffer)
		4) Bind it to pipeline 
			= IASetIndexBuffer//다른 종류도 IASetxxxBuffer로 되어 있음.

- Transformation
	- World Transform (translations, rotations, scaling done here)
	- View Transform = Camera Space
	- Projection Transform = geometry perspective to clip space. 

	계산은 homogenous space에서 하나 결과적으론 non-homogenous좌표계인 screen에서  정의된다.
	Direct3D 행렬은 4x4 homogenous matrix = D3DMATRIX
	
	- Transform Pipeline
		Model Space -(* Mworld)-> World Space -(* Mview)-> Camera Space 
		-(* Mproj)-> Projection Space -(* Mclip)-> Clipping Space 
		-(*Mvs)-> Homogeneous Screen Space -(/ W)> Screen Space
		=> SetTransform(D3DTRANSFORMSTATE_XXX, matrix) 로 계산

- Drawing
	- define vertex and pixel shaders and submit geometry to the rendering pipeline for drawing.
	1) #include <d3d9.h>
	2) screen prepare, swap chain 등등
	3) CreateVertexBuffer



6/2 [수업]
- 게임프로그래밍 전문가..?
- Mesh, Shader => 드디어 분리하기 시작. 내가 그래서 미리 안했지 ㄹㅇㅋㅋ

6/7
Renderer : 
1) Initialize 단계
	1) Vertex 정보 생성
	2) Buffer들 생성
		: 버퍼를 통해 GPU에게 정보 전달 함. 생성 후 SetIAxxx 함수 등으로 바인딩 해야 함.
		ID3D11Device::CreateBuffer
			- [in] D3D11_BUFFER_DESC 
				: 크기, 사용법, 바인딩 방법, CPU, Strides etc(버퍼가 여러 요소로 만들어진 struct형일 경우 각 요소의 크기)
			- [in] D3D1_SUBRESOURCE_DATA 
				: 초기화 데이터 - initialization data에 대한 포인터로 이루어지는 경우가 대부분.
			- [out]	ID3D11Buffer
				: 만들어진 버퍼 포인터 return
		- Vertex Buffer : 각 정점들의 정보 저장 - 위치, 텍스쳐(UV) 좌표 등을 저장.
		- Index Buffer : 꼭짓점 그리는 순서를 두어서 
		- Constant Buffer : 상수 버퍼를 통해 스트림 출력 단계의 결과를 저장할 수 있다. 기본적으로 꼭짓점 버퍼와 비슷하게 생겼으며 생성 과정에서 BIND_FLAG을 D3D11_BIND_CONSTANT_BUFFER로 지정해야 한다.
			- 파이프라인에 바인딩하려면 목표 셰이더와 함께 해야 하는데 GSSetConstantBuffers(PS, VS)로 바인딩한다.
	3) 셰이더 생성
		1) 셰이더 컴파일
		2) Create Shader
		3) InputLayout Creation


### 라이브러리
다른 프로그램에서 사용할 수 있게 만들어지는 서브루틴 혹은 함수들의 집합 파일.
재사용이 필요한 기능이 반복적인 코드 작성을 하지 않고 언제든지 필요한 곳에서 호출하여 사용한다는 목적을 가지고 만들어진다.
보통 컴파일 된 형태인 `object code` 형태로 존재하며 미리 컴파일 되어 있기 때문에 컴파일 시간도 줄어든다.
#### 동적 라이브러리(xxx.dll)
런타임에 연결되는 라이브러리. 런타임에 실행 파일과 라이브러리가 메모리에 위치 될 때 모듈의 주소로 가서 필요한 것만 들고 오는 방식. 즉 하나의 메모리 영역에 올려두고 여러 프로그램이 나누어 사용하는 라이브러리.
##### 장점
- 메모리 절약
- 프로그램에 한 번 올려진 메모리를 공유하므로 사용 공간 자체가 적다.
- 프로그램 실행 중간에 패치가 가능하다.
##### 단점
- 프로그램의 외부의존도가 높아진다.
- 공유 라이브러리를 메모리에 올리려면 찾고 검색하는데 시간이 걸리므로 성능 저하가 생긴다.
- 안정성이 떨어지는 경우가 있다(dll hell)

#### 정적 라이브러리(xxx.lib)
- 컴파일 때 연결하는 라이브러리. 컴파일하는 과정에서 내가 작성한 라이브러리 코드들이 포함이되며 라이브러리 코드가 바뀌면 별도의 패치가 다시 필요해진다.
##### 장점
- 한번 완성되면 안정적으로 프로그램 사용이 가능하다.
- 컴파일시 필요한 라이브러리를 프로그램 내에 적재하기 때문에 앱을 안정적으로 활용할 수 있게 된다.
- 런타임시 외부를 참조할 필요가 없기 때문에 속도에서 장점이 있다.
##### 단점
- 라이브러리 변경 시 모든 프로그램을 처음부터 다시 빌드하여 새로운 버전으로 배포를 진행해줘야 한다.
#### C++ 라이브러리 연결하는 법
#### Header(.h)
속성 -> C++ -> 일반 -> 추가포함 디렉토리에 폴더 경로 추가
#### 동적 라이브러리(.dll)
1. 프로젝트 폴더와 같은 경로에 둔다.
2. 디버깅 -> 환경에 dll 폴더 위치를 적용한다.
#### 정적 라이브러리(.lib)
1. 링커 -> 일반 -> 추가 라이브러리 에 파일 경로 추가
2. 링커 -> 입력 -> 추가 종속성 에 사용하는 lib 파일명 추가
#### vcpkg
라이브러리 관리 프로그램
`vcpkg integreate install` 하고 후에 #include로 사용.

### Shader
GPU에 데이터를 그리는 방법을 알려줌. 셰이더는 두 가지 유형이 있으며 화면에 무언가를 그릴 때 두 가지 모두 정의해야 함.
- Vertex Shader

    모든 Vertex 위치를 Model Matrix에서 View Matrix -> Projection Matrix로 변환하는 작업을 함. Matrix 변환 과정에서 임의로 변형이 가능함.

- Fragment Shader(Pixel Shader)

    Vertex로 이루어진 도형의 각 조각(픽셀)이 어떤 색상으로 그려질지를 정의. 정의되지 않는 오브젝트는 검정색으로 정의됨.
    색은 interpolation 데이터, UV 좌표(텍스쳐), Normal Mapping 등을 통해서 결정된다.

### 렌더링 파이프라인
3D 모델 데이터를 2차원 모니터에 투영하는 프로세스.

directX 11 기준으로 아래와 같다.
Input Assembler -> Vertex Shader -> Hull Shader -> Tessellator -> Domain Shader -> Geometry Shader -> Rasterizer Stage -> Pixel Shader -> Output Merge

[수업]
generalization 계에속~
클래스에 묶기~
WinAPI 컴뷁

ECS = Entity Component System
	- 기존 컴포넌트 - 조각조각(new라서 연속적이지 못한 메모리 방식)
	- 청크로 분리, 필요한 것만 돌리는 방식. => 연속적으로 하여 더 빠르게 iterate가능하게. 
	- 캐쉬 적중률 업
	[NDC] 유나타 ECS & Job System 분석 및 적용 -> 유니티는 현재 고치는 중이올시다.

6/8
그래픽스 시험 오져따
Topology bind를 빼먹어서 안됨. 근데 왜 딴 컴에선 되징 대체 머임 머임
내일은 다 같이 아가리오를.(미리 해올까)

clean code는 완전히 옳지는 않다. 프로젝트 규모에 따라 다르다.
게임 오브젝트에 쉐이더 붙이기.

6/16
- 내부 함수가 있지만 너무 제한적이다.
- Microsoft / DirectXText = 마소에서 만든 텍스쳐 라이브러리, internal로선 제공해주지 않는다.
- 정적 라이브러리 : 디버그로 한 번 릴리즈로 한번 빌드
- Shader Resource = 셰이더 전용 뷰
- Texture2D : register(b0)
- sampler : 목표 크기랑 기존 크기가 다르면 interpolation으로 처리 
=> UV 좌표
	- 좌표를 임의로 늘릴 순 있지만 픽셀 데이터를 추출할 때는 반드시 0 ~ 1 범위로 맞춰야 한다.

6/19
근데 보간을 하면 안된다! 원본 파일으로 나와야 돼
1) 릭 처리
2) 샘플러 처리 - anti-aliasing으로 계단 삭제
	- point = 점 그대로 적용
	- Anisotropic
	- filtering 기능도 샘플러에서 가능

MeshRenderer -> material -> Shader + Mesh
- material은 render pass라고도 한다.
3) AudioClip, listener, AudioSource = (3D sound)

-filtering
	- anisotropic(AF)
https://blog.naver.com/sorkelf/40169951915
https://www.3dgep.com/texturing-lighting-directx-11/

6/20
게임 오브젝트는 Component과 함께 Script도 있어야 한다.
돌릴 땐 컴포넌트 먼저 그 다음 스크립트
결국 알아서 가는 것.

수학
- pdf파일은 모든 점을 벡터로 저장하고 있다.
- 벡터가 헷갈리는 이유 : 중심이 다르기 때문
- 내적
- 행렬

6/21
좌표계이야기
행렬로 Transform을 어떻게 표현하는가.
그 중에서 homogeous w는 왜 필요한가.
	=> 이동 때문에/ 다른 건 곱셈인데 이동만 +라 이동 정보를 저장하고 나중에 처리 하는 것.
짐벌락
 
카메라에 대한 좌표 -> clip 좌표계로 바뀜
16byte가 되지 않으면 밀릴 수 있다.
파티클~

크기 -> 회전-> 이동
무조건 회전이 이동보다 먼저 되어야 한다.

6/22
카메라
-> 카메라 향하는 방향 기준으로 orthographic하게
- 카메라 옵션들 - clipping plane => clipping 부분 => 그림그리는 횟수를 줄이는 것.
view matrix 생성
lookat 함수
라디안 값
숙제 : 씬과 배경 정리.
이번 주 숙제: 음악 종류 정하기 / 씬 종류 정하기

6/24
Scene
1) 사각형 번쩍
2) tutorial
3) overworld - move
4) dubwoofer - purple
5) cool friends - black - 
6) try this
7) trangle 정화
8) 흡수
8) annhilate

6/26
- 텍스쳐에 색 입히기
- 텍스쳐가 있으면  ??
먼가 에러가 났었나봄..

- 알파 블랜딩 => output merger 단계에서 이루어진다. = 짜잔~ 투명도 적용해보자~
- 깊이 -> depth stencil 통해서. 
- 컬링 모드

- raserizer state
- sky box
- 스텐실 버퍼 = masking과 비슷. 아마 원 그리는 것도 이 스텐실 버퍼를 통해 했겠지..
- 샘플링 - from unity에 자세한 설명이 있음.
- 배경 + z 값 하면 될것.
- z가 커질 수록 카메라와 멀어진다. 깊이 버퍼로 보는 거지

=> 비율 맞추는 법을 찾아봐야겠어.
2217 : 262

6/27
- UI 카메라 = 아마 움직이지 않을 것.
- 다 못만들면 추가하지 않을 것.

1) 카메라 다 돌아주면서 계산해야 한다. = renderer.render에서
2) camera rendering mode
3) 만드는 순서 - mOpague -> cutout -> transparent
=> mask 가 애초에 비교해서 만드는 거라 transparent가 제일 나중에 해야 투명도가 적용된다.

6/30
- 반투명한 거끼리 할 땐 z값이 앞에 있는 거 부터 해야 뒤에 있는 놈이 그 색을 받아서 변한다.
- 불투명한 것들끼리 다 그린 다음에 처리하자.

- 부모 자식 관계

7/5
grid object => 아이템 확인

7/6
격자 완성 중
object delete

7/13
- 프레임드랍?
- grid 맨 앞으로 가져오기
- anti-aliasing
- 회전 충돌의 문제
- 축 분리 정리 숙제

7/27
- computeshader : gpu를 cpu처럼 사용할 수 있는 것. rendering pipeline과 관련된 건 아니다.
	- threading이 가능해진다.
	- 3개의 그룹 ->  
8/1
- particle position, direction, endtime
- 같은 material 을 할 때는 Instancing이면 충분.
- shader에선 같은 것임을 어떻게 알까 => use instance id
- 이제 이를 compute shader로 tracking 하는것.
8/16
노이즈를 통해 랜덤을 만드는 것.
